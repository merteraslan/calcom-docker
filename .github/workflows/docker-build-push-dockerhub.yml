name: Build and push image to GHCR

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  workflow_run:
    workflows: ["Update Calendso"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/merteraslan/calcom
          flavor: |
            latest=${{ !github.event.release.prerelease }}

      - name: Copy env
        run: |
          grep -o '^[^#]*' .env.example > .env
          cat .env >> $GITHUB_ENV
          echo "DATABASE_HOST=database:5432" >> $GITHUB_ENV
          eval $(sed -e '/^#/d' -e 's/^/export /' -e 's/$/;/' .env)

      - name: Start database
        run: |
          docker compose up -d database
          echo "Waiting for database to be ready..."
          timeout 60 bash -c 'until docker compose exec -T database pg_isready -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }}; do sleep 2; done'
          echo "Database is ready"
          
      - name: Verify database container
        run: |
          docker ps -a
          docker inspect database --format='{{.State.Status}}'
          docker network ls
          docker network inspect $(docker compose ps -q database | xargs docker inspect --format='{{range .NetworkSettings.Networks}}{{.NetworkID}}{{end}}')

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          load: true
          push: false
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_WEBAPP_URL=${{ env.NEXT_PUBLIC_WEBAPP_URL }}
            NEXT_PUBLIC_API_V2_URL=${{ env.NEXT_PUBLIC_API_V2_URL }}
            NEXT_PUBLIC_LICENSE_CONSENT=${{ env.NEXT_PUBLIC_LICENSE_CONSENT }}
            NEXT_PUBLIC_TELEMETRY_KEY=${{ env.NEXT_PUBLIC_TELEMETRY_KEY }}
            DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.POSTGRES_DB }}
            DATABASE_DIRECT_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.POSTGRES_DB }}

      - name: Test runtime
        run: |
          tags="${{ steps.meta.outputs.tags }}"
          IFS=',' read -ra ADDR <<< "$tags"
          tag=${ADDR[0]}
          docker run --rm --network stack \
            -p 3000:3000 \
            -e DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@database/${{ env.POSTGRES_DB }} \
            -e DATABASE_DIRECT_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@database/${{ env.POSTGRES_DB }} \
            -e NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }} \
            -e CALENDSO_ENCRYPTION_KEY=${{ env.CALENDSO_ENCRYPTION_KEY }} \
            $tag &
          server_pid=$!
          echo "Waiting for the server to start..."
          sleep 120
          for i in {1..60}; do
            echo "Checking server health ($i/60)..."
            if curl -o /dev/null -s -w "%{http_code}" ${{ env.NEXT_PUBLIC_WEBAPP_URL }}/auth/login | grep -qE '^(200|307)$'; then
              echo "Server is healthy"
              kill $server_pid
              exit 0
            fi
            sleep 1
          done
          echo "Server health check failed"
          kill $server_pid
          exit 1
        env:
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          CALENDSO_ENCRYPTION_KEY: ${{ env.CALENDSO_ENCRYPTION_KEY }}

      - name: Push image to GHCR
        id: docker_push
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_WEBAPP_URL=${{ env.NEXT_PUBLIC_WEBAPP_URL }}
            NEXT_PUBLIC_API_V2_URL=${{ env.NEXT_PUBLIC_API_V2_URL }}
            NEXT_PUBLIC_LICENSE_CONSENT=${{ env.NEXT_PUBLIC_LICENSE_CONSENT }}
            NEXT_PUBLIC_TELEMETRY_KEY=${{ env.NEXT_PUBLIC_TELEMETRY_KEY }}
            DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.POSTGRES_DB }}
            DATABASE_DIRECT_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.POSTGRES_DB }}
        if: ${{ !github.event.release.prerelease }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Cleanup
        run: docker compose down

  trigger_coolify_deploy:
    name: Trigger Coolify Deployment
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !github.event.release.prerelease }}
    steps:
      - name: Deploy to Coolify
        run: |
          curl -X GET "${{ secrets.COOLIFY_URL }}/api/v1/deploy?uuid=${{ secrets.COOLIFY_UUID }}&force=true" -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}"
